// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"context"

	"github.com/jivvon/node-label-controller/internal/external/k8s"
	"k8s.io/apimachinery/pkg/api/meta"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeClient struct {
	CreateStub func(context.Context, client.Object, ...client.CreateOption) error
	GetStub    func(context.Context, client.ObjectKey, client.Object, ...client.GetOption) error
	UpdateStub func(context.Context, client.Object, ...client.UpdateOption) error
	DeleteStub func(context.Context, client.Object, ...client.DeleteOption) error
	ListStub   func(context.Context, client.ObjectList, ...client.ListOption) error
}

var _ k8s.Client = &FakeClient{}

func (f *FakeClient) Create(ctx context.Context, obj client.Object, opts ...client.CreateOption) error {
	if f.CreateStub != nil {
		return f.CreateStub(ctx, obj, opts...)
	}
	return nil
}
func (f *FakeClient) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) error {
	if f.GetStub != nil {
		return f.GetStub(ctx, key, obj, opts...)
	}
	return nil
}
func (f *FakeClient) Update(ctx context.Context, obj client.Object, opts ...client.UpdateOption) error {
	if f.UpdateStub != nil {
		return f.UpdateStub(ctx, obj, opts...)
	}
	return nil
}
func (f *FakeClient) Delete(ctx context.Context, obj client.Object, opts ...client.DeleteOption) error {
	if f.DeleteStub != nil {
		return f.DeleteStub(ctx, obj, opts...)
	}
	return nil
}
func (f *FakeClient) List(ctx context.Context, obj client.ObjectList, opts ...client.ListOption) error {
	if f.ListStub != nil {
		return f.ListStub(ctx, obj, opts...)
	}
	return nil
}
func (f *FakeClient) Patch(ctx context.Context, obj client.Object, patch client.Patch, opts ...client.PatchOption) error {
	return nil
}
func (f *FakeClient) RESTMapper() meta.RESTMapper { return nil }
func (f *FakeClient) Scheme() *runtime.Scheme     { return nil }
func (f *FakeClient) GroupVersionKindFor(obj runtime.Object) (schema.GroupVersionKind, error) {
	return schema.GroupVersionKind{}, nil
}
func (f *FakeClient) IsObjectNamespaced(obj runtime.Object) (bool, error)     { return false, nil }
func (f *FakeClient) Status() client.StatusWriter                             { return nil }
func (f *FakeClient) SubResource(subResource string) client.SubResourceClient { return nil }
func (f *FakeClient) DeleteAllOf(ctx context.Context, obj client.Object, opts ...client.DeleteAllOfOption) error {
	return nil
}
